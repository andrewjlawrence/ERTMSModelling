*** 
*** An Interlocking has two states idle and respond (res).
*** In the idle state the interlocking can receive requests (req) and then it issues either a grant or a deny depending on the state of the track.
 

(tomod INTERLOCKING is protecting NAT-TIME-DOMAIN . 
   protecting MSGS .
  sort InterState .
  ops idle resseg resroute :  -> InterState [ctor] .
  
  class Inter | state : InterState, reqseg : Nat, reqroute : Nat, t0 : Bool , t1 : Bool , t2 : Bool , t3 : Bool , t4 : Bool , t5  : Bool , t6 : Bool , route : Nat  , p1n : Bool, p1r : Bool .

  vars N,N2 : Nat .
  vars P : NzNat . 
  vars O : Oid .
  vars B1, B2, B3, B4 , B5 : Bool . 
  var REST : Configuration .

  rl [deltainter] : delta(< O : Inter | >) => < O : Inter | > .

  rl [receiveroutereq1] : {routereq(1) < O : Inter | state : idle > REST} => {< O : Inter | state : resroute , reqroute : 1 > REST} .
  rl [receiveroutereq2] : {routereq(2) < O : Inter | state : idle > REST} => {< O : Inter | state : resroute , reqroute : 2 > REST} .
  crl [routeres1] : < O : Inter | state : resroute , reqroute : 1, route : N, t0 : B1, t1 : B2, t2 : B3, p1n : B4 > => < O : Inter | state : idle, route : 1, p1n : true, p1r : false > routegrant(1) if (N == 1 and B4 == true) or (not B1 and not B2 and  not B3) . 
  crl [routeres2] : < O : Inter | state : resroute , reqroute : 2, route : N, t0 : B1, t1 : B2, t2 : B3, p1r : B4 > => < O : Inter | state : idle, route : 2, p1r : true, p1n : false  > routegrant(2) if (N == 2 and B4 == true) or ((not B1) and (not B2) and  (not B3))  .
  crl [routedeny] : < O : Inter | state : resroute , route : N, reqroute : N2, t0 : B1, t1 : B2, t2 : B3, p1n : B4, p1r : B5 > => < O : Inter | state : idle > routedeny(2) if   (not (N == N2 and B4 == true)) and (not (N == N2 and B5 == true)) and (B1 or B2 or B3)  .

  rl [receivereq] : {req(N) < O : Inter | state : idle > REST} => {< O : Inter | state : resseg, reqseg : N > REST}  .
  rl [resreq1g] : {< O : Inter | state : resseg, t1 : false,  reqseg : 1 > REST} => {< O : Inter | state : idle > grant(1) REST} .
  rl [resreq1d] : {< O : Inter | state : resseg, t1 : true, reqseg : 1 > REST} => {< O : Inter | state : idle > deny(1) REST} .
  rl [resreq2g] : {< O : Inter | state : resseg, t2 : false, reqseg : 2 > REST} => {< O : Inter | state : idle > grant(2) REST} .
  rl [resreq2d] : {< O : Inter | state : resseg, t2 : true, reqseg : 2 > REST} => {< O : Inter | state : idle > deny(2) REST} .
  rl [resreq3g] : {< O : Inter | state : resseg, t3 : false, reqseg : 3 > REST} => {< O : Inter | state : idle > grant(3) REST}  .
  rl [resreq3d] : {< O : Inter | state : resseg, t3 : true, reqseg : 3 > REST} => {< O : Inter | state : idle > deny(3) REST}  .
  
  rl [resreq4g] : {< O : Inter | state : resseg, t4 : false, reqseg : 4 > REST} => {< O : Inter | state : idle > grant(4) REST} .
  rl [resreq4d] : {< O : Inter | state : resseg, t4 : true, reqseg : 4 > REST} => {< O : Inter | state : idle > deny(4) REST} .
  rl [resreq5g] : {< O : Inter | state : resseg, t5 : false, reqseg : 5 > REST} => {< O : Inter | state : idle > grant(5) REST} .
  rl [resreq5d] : {< O : Inter | state : resseg, t5 : true, reqseg : 5 > REST} => {< O : Inter | state : idle > deny(5) REST} .
  rl [resreq5g] : {< O : Inter | state : resseg, t6 : false, reqseg : 6 > REST} => {< O : Inter | state : idle > grant(6) REST} .
  rl [resreq5d] : {< O : Inter | state : resseg, t6 : true, reqseg : 6 > REST} => {< O : Inter | state : idle > deny(6) REST} .
  
  rl [resreq0g] : {< O : Inter | state : resseg, t0 : false, reqseg : 0 > REST} => {< O : Inter | state : idle > grant(0) REST} .
  rl [resreq0d] : {< O : Inter | state : resseg, t0 : true, reqseg : 0 > REST} => {< O : Inter | state : idle > deny(0) REST}  .
  
*** If we add a timed transition here then it will cause time to progress over the whole system.

  rl [trans1] : {trans(1)< O : Inter | > REST} => {< O : Inter | t0 : false, t1 : true > REST} .
  rl [trans2] : {trans(2)< O : Inter | > REST} => {< O : Inter | t1 : false, t2 : true > REST} .
  rl [trans3] : {trans(3)< O : Inter | > REST} => {< O : Inter | t2 : false, t3 : true > REST} .
  rl [trans4] : {trans(4)< O : Inter | > REST} => {< O : Inter | t3 : false, t4 : true > REST} .
  rl [leave4] : {leave(1)< O : Inter | > REST} => {< O : Inter | t4 : false > REST} .
  rl [trans3] : {trans(5)< O : Inter | > REST} => {< O : Inter | t2 : false, t5 : true > REST} .
  rl [trans3] : {trans(6)< O : Inter | > REST} => {< O : Inter | t5 : false, t6 : true > REST} .
  rl [leave4] : {leave(2)< O : Inter | > REST} => {< O : Inter | t6 : false > REST} .
rl [trans0] : {trans(0)< O : Inter | > REST} => {< O : Inter | t0 : true > REST} .


endtom)

***(trew {req(3) < O : Inter | state : idle, reqid : 0, t0 : true, t1 : true, t2 : true, t3 : true, t4 : true >} in time <= 3 .) 
 
***(trew {req(1) < O : Inter | state : idle, reqid : 0 , t0 : false, t1 : false, t2 : false, t3 : false, t4 : false >} in time <= 3 .) 

***(trew {trans(1) < O : Inter | state : idle, reqid : 0 , t0 : true, t1 : false, t2 : false, t3 : false, t4 : false >} in time <= 3 .) 


