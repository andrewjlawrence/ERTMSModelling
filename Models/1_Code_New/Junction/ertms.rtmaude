(tomod ERTMS is protecting NAT-TIME-DOMAIN .
       protecting DISCRETE-SINGLE-TRAIN .
       protecting EXTERNAL-DISCRETE-TRAINS .
       protecting INTERLOCKING .
       protecting RADIOBLOCKPROCESSOR .
       protecting CONTROLLER .


 vars T1,I1 : Oid .

 
 ops initialstate1 initialstate2 initialstate3 : -> GlobalSystem .
 ops initialintstate initialintstate2 : -> Configuration .
 ops initialtrainstate1 initialtrainstate2 : -> Configuration .
 ops initialrbcstate initialrbcstate2 : -> Configuration .
 ops initialcontrollerstate : -> Configuration .
 

 rl [initcontroller] : initialcontrollerstate => < ctr1 : Controller |  routes : (RouteName1, RouteName2, RouteName3), counter : 0  > .

rl [initint] : initialintstate => < inter1 : Inter | state : idle,  routeset : (RouteName1 |-> true, RouteName2 |-> true, RouteName3 |-> false) ,  routelocked : (RouteName1 |-> true, RouteName2 |-> true, RouteName3 |-> false), occ : (BE |-> false, BD |-> false, AE |-> false, AD |-> false, AC |-> false, AB |-> false, AA |-> false),  pointsnormal : (P1 |-> true) ,  pointsreverse : (P1 |-> false) > .

***  class RBC | state : RBCState, lasttrain : Oid,  ma : MapON, curreq : SetO,  trainpos : MapON, trainroute : MapORN, occ : MapTB, trains : SetO , routeproceed : MapRNB .
 rl [intrbc]  : initialrbcstate => < rbc1 : RBC | state : rbcidle, lasttrain : train1,  ma : (train1 |-> 0, train2 |-> 0) , trainpos : (train1 |-> 0, train2 |-> 0) , trainroute : emptymapor,  occ : (AA |-> false, AB |-> false, AC |-> false, AD |-> false, AE |-> false, BD |-> false, BE |-> false) , trains : (train1, train2) , routeproceed : (RouteName1 |-> true, RouteName2 |-> true, RouteName3 |-> false), curreq : empty  > .
rl [inittr1] : initialtrainstate1 => < externtrains : ExternalTrains | maxspeed : (train1 |-> 7, train2 |-> 3), trains : (train1, train2), nexttrain : selecttrain((train1, train2)) > .

   eq initialstate1 = {initialcontrollerstate 
                     initialtrainstate1
    		     initialrbcstate
		     initialintstate} .

endtom) 

(trew initialstate1 in time <= 13 .)

***(trew 
***{< ctr1 : Controller | counter : 1,routes :(1, 2)> < inter1 : Inter | occ :(0 |-> true, 1 |-> true, 2 |-> false, 3 |-> false, 4 |-> false, 5 |-> false, 6 |-> false),p1n : true,
***    p1r : false,reqproceed : 0,routeset : 1,state : idle > < rbc1 : RBC | curreq : empty,lasttrain : train1,ma :(train1 |-> 0, train2 |-> 0),occ :(0 |-> true, 1 |-> true, 2 |->
***    false, 3 |-> false, 4 |-> false, 5 |-> false, 6 |-> false),pos :(train1 |-> 97, train2 |-> 24),route :(train1 |-> 1, train2 |-> 1),routeproceed : 1,state : rbcidle,trains :(
***    train1, train2)> < train1 : ExternalTrains | maxspeed :(train1 |-> 7, train2 |-> 3),nexttrain : notrain,trains : empty > < train1 : Train | ac : 1,dist : 97,ma : 99,maxspeed*** :
***    7,route : 1,speed : 0,state : acc,tseg : 1 > < train2 : Train | ac : 1,dist : 27,ma : 49,maxspeed : 3,route : 1,speed : 3,state : cons,tseg : 0 >} in time <= 1 .)

***(trew { < train1 : ExternalTrains | maxspeed : (train1 |-> 7, train2 |-> 3),nexttrain : notrain,trains : empty > < train1 : Train | ac :
***    1,dist : 97,ma : 99,maxspeed : 7,route : 1,speed : 1,state : acc,tseg : 1 >} in time <= 1 .)

***(trew { < rbc1 : RBC | curreq : empty,lasttrain : train1,ma : (train1 |-> 0, train2 |-> 0),occ : (
***    0 |-> true, 1 |-> true, 2 |-> false, 3 |-> false, 4 |-> false, 5 |-> false, 6 |-> false),pos : (train1 |-> 97, train2 |-> 27),route : (train1 |-> 1, train2 |-> 1),routeproceed
***    : 1,state : rbcidle,trains : (train1, train2) > marequest(train1,97)pos(train1,97)} in time <= 1 .)