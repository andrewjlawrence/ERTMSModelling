*** a module for a discrete single train.
***
*** 
***   

(tomod DISCRETE-SINGLE-TRAIN is protecting NAT-TIME-DOMAIN .
       protecting TOPOLOGY .
       protecting MSGS .
       protecting CONTROLTABLE .
       protecting MAP{Point,Bool} * (sort Map{Point,Bool} to MapPB,
                               sort Entry{Point,Bool} to EntryPB) .

  *** The are 4 train states
  *** cons for a train traveling at a constant (maximum speed)
  *** acc  for an accelerating train
  *** stop for a stopped train
  *** brake for a train that is braking.
  sort TrainState .
  ops  cons acc stop brake :  -> TrainState [ctor] .

  *** The discrete single train class.
  *** state the trains state
  *** dist the position of the train along the track relative to the stating position.
  *** speed the velocity at which the train is moving alway from the starting position.
  *** ac the acceleration of the train
  *** ma the movement authority of the train.
  *** tseg the current track segment which the train is in.
  *** maxspeed the max speed of the train
  *** route The route that the train is travelling along. 
  class Train | state : TrainState, dist : Nat, speed : Nat, ac : Nat,  ma : Nat, tseg : Track , maxspeed : Nat, troute : TRoute, nroute : RouteName .


  sort MyConfig .
  subsort ObjectConfiguration < MyConfig .
  subsort EmptyConfiguration < MyConfig .  
  var MyREST : MyConfig .

  op dma : Nat Nat -> Nat .
  op bd : Nat -> Nat .
  op trackseg : Configuration -> Configuration . 
  op nroute : Configuration -> Configuration .
  vars N,N1, N2,M1,M2 : Nat .
  vars P : NzNat . 
  vars DT,MA,S,A,MAX : Nat .
  vars O,O1,O2 : Oid .
  vars MAPPB1, MAPPB2 : MapPB .
  var AN : Track .
  var TRN : TRoute .
  var NRN : RouteName .
  var OCREST : ObjectConfiguration .
  var REST : Configuration . 
  var M : Msg .

  ceq dma(DT,MA) = MA monus DT if DT <= MA .
  ceq dma(DT,MA) = (tlength monus DT) + MA if MA < DT .
 
  eq bd(S) = ((S * S) + S) div 2 .

  eq mte(< O : Train | >) = 1 . 


*** TODO : Get rid of position
*** The following way of detecting a transition between track segments is inefficient and could be improved.

  eq < O : Train | dist : DT, tseg : AN, troute : TRN, nroute : NRN > pointtrans2(O, MAPPB1, MAPPB2)   = < O : Train | dist : DT, tseg : next(AN,nextTRoute(AN ,MAPPB1, MAPPB2)), troute : nextTRoute(AN, MAPPB1, MAPPB2) > tsegtrans(next(AN,nextTRoute(AN, MAPPB1, MAPPB2)), nextTRoute(AN, MAPPB1, MAPPB2)) . 
  ceq trackseg(< O : Train | dist : DT, tseg : AN, troute : TRN, nroute : NRN >) = < O : Train | dist : DT, tseg : AN > pointtrans(O) if tsegtransition(AN,DT)  and isPoint(AN) . 
  ceq trackseg(< O : Train | dist : DT, tseg : AN, troute : TRN, nroute : NRN >) = < O : Train | dist : DT, tseg : next(AN,TRN) > tsegtrans(next(AN,TRN), TRN) if tsegtransition(AN,DT)  and not isPoint(AN) . 
  eq  trackseg(< O : Train | dist : DT, tseg : AN, troute : TRN, nroute : NRN >) = < O : Train | dist : DT, tseg : AN >  [owise] . 

*** Do we need these two rules??? I think its possible to simplify them and remove one
 ceq magrant(O1,N) < O1 : Train | dist : DT, ma : MA > = < O1 : Train | ma : N > if   MA < N or N < DT  .
 ceq magrant(O1,N) < O1 : Train | dist : DT, ma : MA > = < O1 : Train | ma : MA > if  N <= MA and DT <= N  .

*** The following rewrite rules capture the physical behaviour of the train.

  crl [incspeed] : delta(< O : Train | state : acc,  dist : DT, speed : S, ac : A, ma : MA , maxspeed : MAX, troute : TRN >) => pos(O,DT,TRN)trackseg(< O : Train |  dist : (DT + S), speed : S + A >)  if S + A < MAX and  bd(S + A) <= dma(DT + S, MA) and DT < troutelength(TRN) . 
  crl [maxspeed] : delta(< O : Train | state : acc, dist : DT, speed : S, ac : A, ma : MA, maxspeed : MAX, troute : TRN >) => pos(O,DT,TRN) trackseg(< O : Train | state : cons, dist : (DT + S) , speed : MAX >)   if MAX <= S + A and bd(MAX) <= dma(DT + S , MA) and DT < troutelength(TRN).   
  crl [steadyspeed] : delta(< O : Train | state : cons, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >)  => pos(O,DT,TRN) trackseg(< O : Train |  dist : (DT + S) >)  if bd(S + A)  <= dma(DT + S, MA) and DT < troutelength(TRN) .

*** if the distance to the MA in the next instance of time is less than or eq to the breaking distance the train stops
 
  crl [accbrake] : delta(< O : Train | state : acc, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >) => marequest(O,DT) pos(O,DT,TRN) trackseg(< O : Train | state : brake, dist : (DT + S) , speed : S monus A >)   if  dma(DT + S, MA)  <  bd(S + A) and DT < troutelength(TRN) .

  crl [consbrake] : delta(< O : Train | state : cons, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >) => marequest(O,DT) pos(O,DT,TRN) trackseg(< O : Train | state : brake, dist : (DT + S), speed : S monus A >)    if  dma(DT + S, MA)  <  bd(S + A) and DT < troutelength(TRN) .
  crl [braking] : delta(< O : Train | state : brake, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >)   => marequest(O,DT) pos(O,DT,TRN) trackseg(< O : Train | state : brake, dist : (DT + S), speed : S monus A >)   if 0 < S monus A and dma(DT + S, MA)  <  bd(S + A) and DT < troutelength(TRN) .
  crl [stopping] : delta(< O : Train | state : brake, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >)  => marequest(O,DT) pos(O,DT,TRN) trackseg(< O : Train | state : stop,  speed : 0 >)   if 0 == S monus A and dma(DT + S, MA)  <  bd(S + A)  and DT < troutelength(TRN) .
  crl [stopped] :  delta(< O : Train | state : stop, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >)  => marequest(O,DT) pos(O,DT,TRN) < O : Train | >  if  dma(DT + S, MA)  <  bd(S + A) .
  crl [brakeacc] : delta(< O : Train | state : brake, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >)  =>  pos(O,DT,TRN) trackseg(< O : Train | state : acc, dist : (DT + S ), speed : S >)   if  bd(S + A)   <= dma((DT + S) , MA) and DT < troutelength(TRN) .
  crl [stopacc] :  delta(< O : Train | state : stop, dist : DT, speed : S, ac : A, ma : MA, troute : TRN >)  =>  pos(O,DT,TRN) trackseg(< O : Train | state : acc, dist : (DT + S), speed : S >)    if  bd(S + A)   <= dma((DT + S) , MA) and DT < troutelength(TRN) .
  crl [leave] :  delta(< O : Train | dist : DT, speed : S, ac : A, ma : MA, troute : TRN >)   =>  pos(O,tlength,TRN)leave(TRN)   if  troutelength(TRN) <= (DT + S)  .

endtom)

