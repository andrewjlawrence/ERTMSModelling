*** This file contains the messages and background context.
*** We create a view for object identifiers. To allow for their use in parameterised datastructures like sets.

(view Oid from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv)

(tomod MSGS is 
   protecting POSRAT-TIME-DOMAIN-WITH-INF .
   protecting TOPOLOGY .
   protecting MAP{Track,Bool} * (sort Map{Track,Bool} to MapTrack2Bool,
                             sort Entry{Track,Bool} to EntryTrack2Bool) .
   protecting MAP{Point,Bool} * (sort Map{Point,Bool} to MapPoint2Bool,
                             sort Entry{Point,Bool} to EntryPoint2Bool) .
   protecting MAP{RouteName,Bool} * (sort Map{RouteName,Bool} to MapRouteName2Bool,
                                 sort Entry{RouteName,Bool} to EntryRouteName2Bool) .

    *** req
    *** grant
    *** deny
    *** routereq
    *** routegrant
    *** routedeny
    *** leave is used by a train to communicate to the interlocking that it is leaving a segment of track.
    msgs req grant deny routereq routegrant routedeny : Nat -> Msg .
 
    *** trans is used by a train to communicate to the interlocking that it has transitioned from one tracksegment to another.
    msgs tsegtransition : Track Track -> Msg . 
    msgs leave : Track -> Msg .

    *** marequest is used by a train to request a movement authority from the RBC. 
    msgs marequest  : Oid Track -> Msg .
    
    *** A route request, acknowledgement, set and proceed all consist of a route number
    msgs routeset, proceedrequest, proceedgrant, proceeddeny : RouteName -> Msg .
    ***
    msgs enterroute : Oid TRoute -> Msg . 

    *** magrant is used by the RBC to grant a movement authority.
    *** pos is used by the train to update its position with the RBC
    msg magrant : Oid Nat -> Msg .
    
    msg pos : Oid Nat TRoute -> Msg .
    
    *** track occupation data sent from the interlocking to the RBC
    msgs trackocc : MapTrack2Bool -> Msg .

    *** route set data sent from the interlocking to the RBC
    msgs setroutes : MapRouteName2Bool -> Msg .

    *** 
    msg pointtrans : Oid -> Msg .
    msg pointtrans2 : Oid MapPoint2Bool MapPoint2Bool -> Msg .

   
    ops train1 train2 train3 inter1 rbc1 ctr1 : -> Oid [ctor] .


    *** All soup
    vars REST,CURRENT : Configuration .

    *** Objects only, no messages
    --- var OCURRENT : ObjectConfiguration .

    *** Non empty configuration
    vars CON1,CON2 : NEConfiguration .
    var MSG1 : Msg .
    
   
    *** tick rule:
    var R : Time .

    crl [tick] : {CURRENT} => {delta(CURRENT,R)} in time R if R <= mte(CURRENT) [nonexec] .

    --- delta (note: more defs for objects incl mte in subsequent files)
 
    op delta : Configuration Time -> Configuration [frozen (1)]  .
    eq delta(none, R) = none .
    eq delta(CON1 CON2, R) = delta(CON1,R) delta(CON2,R) . 
     

    *** The mte operation computes the maximum elapsed time.
    	
    op mte : Configuration -> TimeInf [frozen (1)] .
    eq mte(none) = INF .
    eq mte(CON1 CON2) = min(mte(CON1),mte(CON2)) .
    eq mte(M:Msg) = 0 .

endtom)

